{
    "sourceFile": "src/main/java/com/example/testsiat/test/ctrl/TestCtrl.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1744612240883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744612263174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,109 @@\n package com.example.testsiat.test.ctrl;\r\n \r\n+/*\r\n+ * IOC(Inversion of Control) : 제어의 역전. 객체의 생성과 생명주기를 Spring이 관리하는 것. -> Spring Container에서 관리\r\n+ * - DI(Dependency Injection) : 의존성 주입. 객체 간의 의존성을 Spring이 관리하는 것.\r\n+ * - DL(Dependency Lookup) : 의존성 조회. 객체 간의 의존성을 Spring이 관리하지 않는 것.\r\n+ */\r\n+\r\n+/*\r\n+ * 사용자 요청과 관련된 Annotation\r\n+ *   * @RequestMapping : HTTP 요청을 처리하는 메서드에 붙이는 annotation\r\n+ * \r\n+ */\r\n+\r\n+ /*\r\n+  * 의존성 관리를 위한 annotation\r\n+    *  * @Autowired : Spring에서 관리하는 객체를 주입받는 annotation\r\n+    *  * @Injection : Spring에서 관리하는 객체를 주입받는 annotation\r\n+    *  * @Resource : Spring에서 관리하는 객체를 주입받을 때, 어떤 객체를 주입받을지 지정하는 annotation\r\n+    *  * @Qualifier : Spring에서 관리하는 객체를 주입받을 때, 어떤 객체를 주입받을지 지정하는 annotation\r\n+  */\r\n+\r\n+\r\n+/*\r\n+ 객체 생성과 관련된 annotation\r\n+    * @Component : Spring에서 관리하는 일반적인 컴포넌트에 붙이는 annotation\r\n+    * @Controller : Spring MVC에서 Controller 역할을 하는 클래스에 붙이는 annotation\r\n+    * @Service : 비즈니스 로직을 처리하는 클래스에 붙이는 annotation\r\n+    * @Repository : 데이터베이스와의 상호작용을 처리하는 클래스에 붙이는 annotation\r\n+ */\r\n+\r\n+ // class에 매핑할 수도 있고, 메서드에 매핑할 수도 있다.\r\n+    // class에 매핑할 경우, 메서드에 매핑된 URL 경로는 class에 매핑된 URL 경로를 기준으로 한다.\r\n+    // 예를 들어, class에 \"/test\"가 매핑되어 있고, 메서드에 \"/test2\"가 매핑되어 있다면, 실제 URL 경로는 \"/test/test2\"가 된다.\r\n+    \r\n+    \r\n+// @Controller는 Spring MVC에서 Controller 역할을 하는 클래스에 붙이는 annotation이다.\r\n+@Controller\r\n+\r\n+// user라면 @RequestMapping(\"/user\")를 붙여야 한다.\r\n+@RequestMapping(\"/test\") // URL 경로를 지정하는 annotation\r\n public class TestCtrl {\r\n+\r\n+    @Autowired // TestService 객체를 자동으로 주입받는다.\r\n+    private TestService service; // TestService 객체를 주입받는다.\r\n     \r\n+    // public TestCtrl() {\r\n+    //     System.out.println(\"TestCtrl 생성자 호출\");\r\n+    // }\r\n+    \r\n+    @RequestMapping(\"/insert\") // URL 경로를 지정하는 annotation\r\n+    //@RequestMapping(\"path\", method=RequestMethod.GET)\r\n+    public String insert() {\r\n+        System.out.println(\"insert() 호출\");\r\n+        // service\r\n+        service.insertRow();\r\n+        return \"insert\"; // insert.jsp 파일을 반환\r\n+    }\r\n+\r\n+    @RequestMapping(\"/update\") // URL 경로를 지정하는 annotation\r\n+    public String update() {\r\n+        System.out.println(\"update() 호출\");\r\n+        return \"update\"; // update.jsp 파일을 반환\r\n+    }\r\n+\r\n+    @RequestMapping(\"/delete\") // URL 경로를 지정하는 annotation\r\n+    public String delete() {\r\n+        System.out.println(\"delete() 호출\");\r\n+        return \"delete\"; // delete.jsp 파일을 반환\r\n+    }\r\n+    @RequestMapping(\"/select\") // URL 경로를 지정하는 annotation\r\n+    public String select() {\r\n+        System.out.println(\"select() 호출\");\r\n+        return \"select\"; // select.jsp 파일을 반환\r\n+    }\r\n+\r\n+    // @RequestMapping(\"/test\") // URL 경로를 지정하는 annotation\r\n+    // public String test() {\r\n+    //     return \"test\"; // test.jsp 파일을 반환\r\n+    // }\r\n+\r\n+    // @RequestMapping(\"/test2\") // URL 경로를 지정하는 annotation\r\n+    // public String test2() {\r\n+    //     return \"test2\"; // test2.jsp 파일을 반환\r\n+    // }\r\n+    \r\n }\r\n+\r\n+\r\n+\r\n+\r\n+/*\r\n+ 객체 생성과 관련된 annotation\r\n+    * @Controller : Spring MVC에서 Controller 역할을 하는 클래스에 붙이는 annotation\r\n+    * @RestController : @Controller + @ResponseBody. JSON/XML 형태로 응답을 보내는 Controller에 붙이는 annotation\r\n+    * @Service : 비즈니스 로직을 처리하는 클래스에 붙이는 annotation\r\n+    * @Repository : 데이터베이스와의 상호작용을 처리하는 클래스에 붙이는 annotation\r\n+    * @Component : Spring에서 관리하는 일반적인 컴포넌트에 붙이는 annotation\r\n+    * @Configuration : Spring의 설정 정보를 담고 있는 클래스에 붙이는 annotation\r\n+    * @Bean : Spring에서 관리하는 객체를 생성하는 메서드에 붙이는 annotation\r\n+    * @Autowired : Spring에서 관리하는 객체를 주입받는 annotation\r\n+    * @Value : Spring에서 관리하는 프로퍼티 값을 주입받는 annotation\r\n+    * @Qualifier : Spring에서 관리하는 객체를 주입받을 때, 어떤 객체를 주입받을지 지정하는 annotation\r\n+    * @Primary : Spring에서 관리하는 객체를 주입받을 때, 기본적으로 주입받을 객체를 지정하는 annotation\r\n+    * @Scope : Spring에서 관리하는 객체의 범위를 지정하는 annotation\r\n+ */\r\n+\r\n+\r\n+/*\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744612285853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,10 @@\n package com.example.testsiat.test.ctrl;\r\n \r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Controller;\r\n+import org.springframework.web.bind.annotation.RequestMapping;\r\n+\r\n /*\r\n  * IOC(Inversion of Control) : 제어의 역전. 객체의 생성과 생명주기를 Spring이 관리하는 것. -> Spring Container에서 관리\r\n  * - DI(Dependency Injection) : 의존성 주입. 객체 간의 의존성을 Spring이 관리하는 것.\r\n  * - DL(Dependency Lookup) : 의존성 조회. 객체 간의 의존성을 Spring이 관리하지 않는 것.\r\n"
                },
                {
                    "date": 1744612353557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Controller;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n \r\n+import com.example.testsiat.test.service.TestService;\r\n+\r\n /*\r\n  * IOC(Inversion of Control) : 제어의 역전. 객체의 생성과 생명주기를 Spring이 관리하는 것. -> Spring Container에서 관리\r\n  * - DI(Dependency Injection) : 의존성 주입. 객체 간의 의존성을 Spring이 관리하는 것.\r\n  * - DL(Dependency Lookup) : 의존성 조회. 객체 간의 의존성을 Spring이 관리하지 않는 것.\r\n"
                },
                {
                    "date": 1744612382680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,6 +110,4 @@\n     * @Primary : Spring에서 관리하는 객체를 주입받을 때, 기본적으로 주입받을 객체를 지정하는 annotation\r\n     * @Scope : Spring에서 관리하는 객체의 범위를 지정하는 annotation\r\n  */\r\n \r\n-\r\n-/*\n\\ No newline at end of file\n"
                }
            ],
            "date": 1744612240883,
            "name": "Commit-0",
            "content": "package com.example.testsiat.test.ctrl;\r\n\r\npublic class TestCtrl {\r\n    \r\n}\r\n"
        }
    ]
}